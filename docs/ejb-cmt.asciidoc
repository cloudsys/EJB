What is it?
-----------
This demo demonstrates using transactions managed by the container. It is a fairly typical scenario of updating a database and sending a JMS message in the same transaction. A simple MDB is provided that prints out the message sent but this is not a transactional MDB and is purely provided for debugging purposes.

Aspects touched upon in the code:

. XA transaction control using the container managed transaction annotations
. XA access to a PostgreSQL database using the JPA API
. XA access to a JMS queue


What are container managed transactions?
----------------------------------------

Prior to EJB, getting the right incantation to ensure sound transactional operation of the business logic was a highly specialised skill. Although this still holds true to a great extent, EJB has provided a series of improvements to to allow simplified transaction demarcation notation that is therefore easier to read and test. 

With CMT, the EJB container sets the boundaries of a transaction. This differs from BMT (bean managed transactions) where the developer is responsible for initiating and completing a transaction via the methods begin, commit, rollback on a <code>javax.transaction.UserTransaction</code>.

What makes this an example of container managed transactions?
-------------------------------------------------------------

Take a look at <code>com.kylin.ejb.cmt.ejb.CustomerManagerEJBImpl</code>. You can see that this stateless session bean has been marked up with the @javax.ejb.TransactionAttribute annotation.

The available options for this annotation are as follows:

* Required - As demonstrated in the demo. If a transaction does not already exist, this will initiate a transaction and complete it for you, otherwise the business logic will be integrated into the existing transaction
* RequiresNew - If there is already a transaction running, it will be suspended, the work performed within a new transaction which is completed at exit of the method and then the original transaction resumed. 
* Mandatory - If there is no transaction running, calling a business method with is annotated with this will result in an error
* NotSupported - If there is a transaction running, it will be suspended and no transaction will be initiated for this business method
* Supports - This will run the method within a transaction if a transaction exists, alternatively, if there is no transaction running the method will not be executed within the scope of a transaction 
* Never - If the client has a transaction running and does not suspend it but calls a method annotated with Never then an EJB exception will be raised.


System requirements
-------------------

All you need to build this project is Java 6.0 (Java SDK 1.6) or better, Maven 3.0 or better.

The application this project produces is designed to be run on JBoss Enterprise Application Platform 6 or JBoss AS 7. 



Configure the application server to use PostgreSQL
--------------------------------------------------

. Be sure to start the PostgreSQL database. Create database cmtdb, user cmtuser with password cmtpass
. Be sure to [add the PostgreSQL Module]to the JBoss server.
. Be sure to [add the PostgreSQL driver]to the JBoss server configuration file.

NOTE: https://github.com/kylinsoong/EJB/blob/master/docs/READEME.asciidoc has detailed steps for operation with PostgreSQL

Build and Deploy the Quickstart
-------------------------------

* Make sure you have started the JBoss Server(full instance) with the PostgreSQL driver

* Open a command line and navigate to the root directory of this quickstart.

* Type this command to build and deploy the archive:

----
mvn clean package
----

* This will generate `target/cmt.war`, deploy it to the running JBosss instance.

Access the application 
---------------------
To access the application type the following into a browser: <http://localhost:8080/cmtTest/>

The application will be running at the following URL: <http://localhost:8080/cmtTest/>.

You will be presented with a simple form for adding customers to a database.

After a user is successfully added to the database, a message is produced containing the details of the user. An example MDB will dequeue this message and print the following contents:

----
Received Message: Created invoice for customer named:  kylin
----

