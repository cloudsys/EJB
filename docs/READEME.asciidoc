Demo entry
----------

link:ejb-remote.asciidoc[EJB remote demo entry]

link:ejb-in-war.asciidoc[EJB war test demo entry]

link:ejb-in-ear.asciidoc[EJB ear test demo entry]

link:ejb-security.asciidoc[EJB security demo entry]

link:ejb-singleton.asciidoc[EJB singleton demo entry]

link:ejb-mdb.asciidoc[EJB mdb demo entry]

link:ejb-cmt.asciidoc[EJB cmt demo entry]


JBoss-as-7 & JBoss-eap-6 JNDI lookup name syntax:
-------------------------------------------------
* stateless session bean: *ejb:<appName>/<moduleName>/<distinctName>/<beanName>!<viewClassName>*

* stateful session bean : *ejb:<appName>/<moduleName>/<distinctName>/<beanName>!<viewClassName>?stateful*

. *<appName>* The application name is the name of the EAR that the EJB is deployed in (without the .ear).  If the EJB JAR is not deployed in an EAR then this is blank.  The app name can also be specified in the EAR's application.xml

. *<moduleName>* By the default the module name is the name of the EJB JAR file (without the .jar suffix).  The module name might be overridden in the ejb-jar.xml

. *<distinctName>* AS7 allows each deployment to have an (optional) distinct name. This example does not use this so leave it blank.

. *<beanName>* The name of the session been to be invoked.

. *<viewClassName>* The fully qualified classname of the remote interface.  Must include the whole package name.



Install and Configure the PostgreSQL Database
----------------------------------------------

1. Install PostgreSQL
+++++++++++++++++++++

* Open a Terminal window and enter the following command:
----
yum install postgresql-server
----

* Use the following command check the installation result:
----
rpm -qa | grep postgres*
----

2. Set a password for the postgres user
+++++++++++++++++++++++++++++++++++++++

* the installation creates a user named postgres, change the password of User postgres, we only need login as root user enter the following user:
----
passwd postgres
----

* enter <passwd> twice for setting the password

* login as postgres by enter the command:
----
su - postgres
----

3. Configure the database
+++++++++++++++++++++++++

* In a command line, login as the postgres user, Initialize the Database - Enter the following commands to initialize the database:
----
initdb -D /var/lib/pgsql/data
----

* Modify the /var/lib/pgsql/data/pg_hba.conf file to set the authentication scheme to password for tcp connections. Modify the line following the IPv4 local connections: change trust to to password. The line should look like this:
----
host    all    all    127.0.0.1/32    password
----

* Modify the /var/lib/pgsql/data/postgresql.conf file to allow prepared transactions and reduce the maximum number of connections:
----
max_prepared_transactions = 10
max_connections = 10
----

* Start the Database:
----
postgres -D /var/lib/pgsql/data
----

NOTE: This command will hang, just leave the terminal window open.

4. Create a Database User
+++++++++++++++++++++++++

* open a new terminal window and switch users to postgres:
----
su - postgres
----

* Run the psql tool:
----
psql
----

* Create the user `sa` with password `sa`:
----
create user sa with password 'sa';
----

* create a PostgreSQL database named `DEMO_DATABASENAME`, specifying the `sa` as the owner: 
----
grant all privileges on database "DEMO_DATABASENAME" to sa;
----

* grant all privileges on the database by typing the following commands:
----
grant all privileges on database "DEMO_DATABASENAME" to sa;
----

* exit the psql for entering the command:
----
\q
----

NOTE:  as noted above, replace `DEMO_DATABASENAME`, `sa` with the name provided in the particular demo):


5. Start & Stop PostSQL Database as service
+++++++++++++++++++++++++++++++++++++++++++

* start
----
service postgresql start
----

* stop
----
service postgresql stop
----
