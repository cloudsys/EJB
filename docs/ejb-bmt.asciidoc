
What is it?
-----------

On occasion, the application developer requires finer grained control over the lifecycle of JTA transactions and JPA Entity Managers than the defaults provided by the Java EE container. This example shows how the developer can override these defaults and take control of aspects of the lifecycle of JPA and transactions.

This example demonstrates how to manually manage transaction demarcation while accessing JPA entities in JBoss Enterprise Application Platform 6 or JBoss AS 7.

When you run this example, you will be provided with a `Use bean managed Entity Managers` checkbox.
* If you check the checkbox, it shows the developer responsibilities when injecting an Entity Manager into a managed (stateless) bean.
* If you uncheck the checkbox, shows the developer responsibilities when using JPA and transactions with an unmanaged component.

JBoss Enterprise Application Platform 6 and JBoss AS 7 ship with H2, an in-memory database written in Java. This example shows how to transactionally insert key value pairs into the H2 database and demonstrates the requirements on the developer with respect to the JPA Entity Manager.

NOTE: A Java EE container is designed with robustness in mind, so you should carefully analyse the scaleabiltiy, concurrency and performance needs of you application before taking advantage of these techniques in your own applications.


System requirements
-------------------

All you need to build this project is Java 6.0 (Java SDK 1.6) or better, Maven 3.0 or better.

The application this project produces is designed to be run on JBoss Enterprise Application Platform 6 or JBoss AS 7. 


Build and Deploy 
----------------

*  Make sure you have started the JBoss Server.
* Open a command line and navigate to the root directory of this demo.
* Type this command to build:
----   
 mvn clean package jboss-as:deploy
----

* This will generate `target/bmt.war`, deploy to the running JBoss.
 

Access the application 
---------------------

The application will be running at the following URL: <http://localhost:8080/bmtTest/>.

You will be presented with a simple form for adding key/value pairs and a checkbox to indicate whether the updates should be executed using an unmanaged component. Effectively this will run the transaction and JPA updates in the servlet, not session beans. If the box is checked then the updates will be executed within a session bean method.

. To list all pairs leave the key input box empty. 
. To add or update the value of a key fill in the key and value input boxes. 
. Press the submit button to see the results.


